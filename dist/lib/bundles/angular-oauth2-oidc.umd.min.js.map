{
  "version": 3,
  "file": "angular-oauth2-oidc.umd.min.js",
  "sources": [
    "ng://angular-oauth2-oidc/node_modules/tslib/tslib.es6.js",
    "ng://angular-oauth2-oidc/out/types.ts",
    "ng://angular-oauth2-oidc/out/token-validation/validation-handler.ts",
    "ng://angular-oauth2-oidc/out/url-helper.service.ts",
    "ng://angular-oauth2-oidc/out/events.ts",
    "ng://angular-oauth2-oidc/out/base64-helper.ts",
    "ng://angular-oauth2-oidc/out/auth.config.ts",
    "ng://angular-oauth2-oidc/out/encoder.ts",
    "ng://angular-oauth2-oidc/out/oauth-service.ts",
    "ng://angular-oauth2-oidc/out/oauth-module.config.ts",
    "ng://angular-oauth2-oidc/out/interceptors/resource-server-error-handler.ts",
    "ng://angular-oauth2-oidc/out/interceptors/default-oauth.interceptor.ts",
    "ng://angular-oauth2-oidc/out/token-validation/null-validation-handler.ts",
    "ng://angular-oauth2-oidc/out/angular-oauth-oidic.module.ts",
    "ng://angular-oauth2-oidc/out/token-validation/jwks-validation-handler.ts",
    "ng://angular-oauth2-oidc/out/tokens.ts"
  ],
  "sourcesContent": [
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n",
    "/**\n * Additional options that can be passt to tryLogin.\n */\nexport class LoginOptions {\n  /**\n   * Is called, after a token has been received and\n   * successfully validated.\n   *\n   * Deprecated:  Use property ``events`` on OAuthService instead.\n   */\n  onTokenReceived?: (receivedTokens: ReceivedTokens) => void;\n\n  /**\n   * Hook, to validate the received tokens.\n   * Deprecated:  Use property ``tokenValidationHandler`` on OAuthService instead.\n   */\n  validationHandler?: (receivedTokens: ReceivedTokens) => Promise<any>;\n\n  /**\n   * Called when tryLogin detects that the auth server\n   * included an error message into the hash fragment.\n   *\n   * Deprecated:  Use property ``events`` on OAuthService instead.\n   */\n  onLoginError?: (params: object) => void;\n\n  /**\n   * A custom hash fragment to be used instead of the\n   * actual one. This is used for silent refreshes, to\n   * pass the iframes hash fragment to this method.\n   */\n  customHashFragment?: string;\n\n  /**\n   * Set this to true to disable the oauth2 state\n   * check which is a best practice to avoid\n   * security attacks.\n   * As OIDC defines a nonce check that includes\n   * this, this can be set to true when only doing\n   * OIDC.\n   */\n  disableOAuth2StateCheck?: boolean;\n\n  /**\n   * Normally, you want to clear your hash fragment after\n   * the lib read the token(s) so that they are not displayed\n   * anymore in the url. If not, set this to true.\n   */\n  preventClearHashAfterLogin? = false;\n}\n\n/**\n * Defines a simple storage that can be used for\n * storing the tokens at client side.\n * Is compatible to localStorage and sessionStorage,\n * but you can also create your own implementations.\n */\nexport abstract class OAuthStorage {\n  abstract getItem(key: string): string | null;\n  abstract removeItem(key: string): void;\n  abstract setItem(key: string, data: string): void;\n}\n\n/**\n * Represents the received tokens, the received state\n * and the parsed claims from the id-token.\n */\nexport class ReceivedTokens {\n  idToken: string;\n  accessToken: string;\n  idClaims?: object;\n  state?: string;\n}\n\n/**\n * Represents the parsed and validated id_token.\n */\nexport interface ParsedIdToken {\n  idToken: string;\n  idTokenClaims: object;\n  idTokenHeader: object;\n  idTokenClaimsJson: string;\n  idTokenHeaderJson: string;\n  idTokenExpiresAt: number;\n}\n\n/**\n * Represents the response from the token endpoint\n * http://openid.net/specs/openid-connect-core-1_0.html#TokenEndpoint\n */\nexport interface TokenResponse {\n  access_token: string;\n  token_type: string;\n  expires_in: number;\n  refresh_token: string;\n  scope: string;\n  state?: string;\n}\n\n/**\n * Represents the response from the user info endpoint\n * http://openid.net/specs/openid-connect-core-1_0.html#UserInfo\n */\nexport interface UserInfo {\n  sub: string;\n  [key: string]: any;\n}\n\n/**\n * Represents an OpenID Connect discovery document\n */\nexport interface OidcDiscoveryDoc {\n  issuer: string;\n  authorization_endpoint: string;\n  token_endpoint: string;\n  token_endpoint_auth_methods_supported: string[];\n  token_endpoint_auth_signing_alg_values_supported: string[];\n  userinfo_endpoint: string;\n  check_session_iframe: string;\n  end_session_endpoint: string;\n  jwks_uri: string;\n  registration_endpoint: string;\n  scopes_supported: string[];\n  response_types_supported: string[];\n  acr_values_supported: string[];\n  response_modes_supported: string[];\n  grant_types_supported: string[];\n  subject_types_supported: string[];\n  userinfo_signing_alg_values_supported: string[];\n  userinfo_encryption_alg_values_supported: string[];\n  userinfo_encryption_enc_values_supported: string[];\n  id_token_signing_alg_values_supported: string[];\n  id_token_encryption_alg_values_supported: string[];\n  id_token_encryption_enc_values_supported: string[];\n  request_object_signing_alg_values_supported: string[];\n  display_values_supported: string[];\n  claim_types_supported: string[];\n  claims_supported: string[];\n  claims_parameter_supported: boolean;\n  service_documentation: string;\n  ui_locales_supported: string[];\n}\n",
    "export interface ValidationParams {\n  idToken: string;\n  accessToken: string;\n  idTokenHeader: object;\n  idTokenClaims: object;\n  jwks: object;\n  loadKeys: () => Promise<object>;\n}\n\n/**\n * Interface for Handlers that are hooked in to\n * validate tokens.\n */\nexport abstract class ValidationHandler {\n  /**\n   * Validates the signature of an id_token.\n   */\n  public abstract validateSignature(\n    validationParams: ValidationParams\n  ): Promise<any>;\n\n  /**\n   * Validates the at_hash in an id_token against the received access_token.\n   */\n  public abstract validateAtHash(validationParams: ValidationParams): boolean;\n}\n\n/**\n * This abstract implementation of ValidationHandler already implements\n * the method validateAtHash. However, to make use of it,\n * you have to override the method calcHash.\n */\nexport abstract class AbstractValidationHandler implements ValidationHandler {\n  /**\n   * Validates the signature of an id_token.\n   */\n  abstract validateSignature(validationParams: ValidationParams): Promise<any>;\n\n  /**\n   * Validates the at_hash in an id_token against the received access_token.\n   */\n  validateAtHash(params: ValidationParams): boolean {\n    let hashAlg = this.inferHashAlgorithm(params.idTokenHeader);\n\n    let tokenHash = this.calcHash(params.accessToken, hashAlg); // sha256(accessToken, { asString: true });\n\n    let leftMostHalf = tokenHash.substr(0, tokenHash.length / 2);\n\n    let tokenHashBase64 = btoa(leftMostHalf);\n\n    let atHash = tokenHashBase64\n      .replace(/\\+/g, '-')\n      .replace(/\\//g, '_')\n      .replace(/=/g, '');\n    let claimsAtHash = params.idTokenClaims['at_hash'].replace(/=/g, '');\n\n    if (atHash !== claimsAtHash) {\n      console.error('exptected at_hash: ' + atHash);\n      console.error('actual at_hash: ' + claimsAtHash);\n    }\n\n    return atHash === claimsAtHash;\n  }\n\n  /**\n   * Infers the name of the hash algorithm to use\n   * from the alg field of an id_token.\n   *\n   * @param jwtHeader the id_token's parsed header\n   */\n  protected inferHashAlgorithm(jwtHeader: object): string {\n    let alg: string = jwtHeader['alg'];\n\n    if (!alg.match(/^.S[0-9]{3}$/)) {\n      throw new Error('Algorithm not supported: ' + alg);\n    }\n\n    return 'sha' + alg.substr(2);\n  }\n\n  /**\n   * Calculates the hash for the passed value by using\n   * the passed hash algorithm.\n   *\n   * @param valueToHash\n   * @param algorithm\n   */\n  protected abstract calcHash(valueToHash: string, algorithm: string): string;\n}\n",
    "import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class UrlHelperService {\n  public getHashFragmentParams(customHashFragment?: string): object {\n    let hash = customHashFragment || window.location.hash;\n\n    hash = decodeURIComponent(hash);\n\n    if (hash.indexOf('#') !== 0) {\n      return {};\n    }\n\n    const questionMarkPosition = hash.indexOf('?');\n\n    if (questionMarkPosition > -1) {\n      hash = hash.substr(questionMarkPosition + 1);\n    } else {\n      hash = hash.substr(1);\n    }\n\n    return this.parseQueryString(hash);\n  }\n\n  public parseQueryString(queryString: string): object {\n    const data = {};\n    let\n      pairs,\n      pair,\n      separatorIndex,\n      escapedKey,\n      escapedValue,\n      key,\n      value;\n\n    if (queryString === null) {\n      return data;\n    }\n\n    pairs = queryString.split('&');\n\n    for (let i = 0; i < pairs.length; i++) {\n      pair = pairs[i];\n      separatorIndex = pair.indexOf('=');\n\n      if (separatorIndex === -1) {\n        escapedKey = pair;\n        escapedValue = null;\n      } else {\n        escapedKey = pair.substr(0, separatorIndex);\n        escapedValue = pair.substr(separatorIndex + 1);\n      }\n\n      key = decodeURIComponent(escapedKey);\n      value = decodeURIComponent(escapedValue);\n\n      if (key.substr(0, 1) === '/') { key = key.substr(1); }\n\n      data[key] = value;\n    }\n\n    return data;\n  }\n}\n",
    "export type EventType =\n  | 'discovery_document_loaded'\n  | 'received_first_token'\n  | 'jwks_load_error'\n  | 'invalid_nonce_in_state'\n  | 'discovery_document_load_error'\n  | 'discovery_document_validation_error'\n  | 'user_profile_loaded'\n  | 'user_profile_load_error'\n  | 'token_received'\n  | 'token_error'\n  | 'token_refreshed'\n  | 'token_refresh_error'\n  | 'silent_refresh_error'\n  | 'silently_refreshed'\n  | 'silent_refresh_timeout'\n  | 'token_validation_error'\n  | 'token_expires'\n  | 'session_changed'\n  | 'session_error'\n  | 'session_terminated'\n  | 'logout';\n\nexport abstract class OAuthEvent {\n  constructor(readonly type: EventType) {}\n}\n\nexport class OAuthSuccessEvent extends OAuthEvent {\n  constructor(type: EventType, readonly info: any = null) {\n    super(type);\n  }\n}\n\nexport class OAuthInfoEvent extends OAuthEvent {\n  constructor(type: EventType, readonly info: any = null) {\n    super(type);\n  }\n}\n\nexport class OAuthErrorEvent extends OAuthEvent {\n  constructor(\n    type: EventType,\n    readonly reason: object,\n    readonly params: object = null\n  ) {\n    super(type);\n  }\n}\n",
    "// see: https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#The_.22Unicode_Problem.22\nexport function b64DecodeUnicode(str) {\n  const base64 = str.replace(/\\-/g, '+').replace(/\\_/g, '/');\n\n  return decodeURIComponent(\n    atob(base64)\n      .split('')\n      .map(function(c) {\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n      })\n      .join('')\n  );\n}\n",
    "export class AuthConfig {\n  /**\n   * The client's id as registered with the auth server\n   */\n  public clientId? = '';\n\n  /**\n   * The client's redirectUri as registered with the auth server\n   */\n  public redirectUri? = '';\n\n  /**\n   * An optional second redirectUri where the auth server\n   * redirects the user to after logging out.\n   */\n  public postLogoutRedirectUri? = '';\n\n  /**\n   * The auth server's endpoint that allows to log\n   * the user in when using implicit flow.\n   */\n  public loginUrl? = '';\n\n  /**\n   * The requested scopes\n   */\n  public scope? = 'openid profile';\n\n  public resource? = '';\n\n  public rngUrl? = '';\n\n  /**\n   * Defines whether to use OpenId Connect during\n   * implicit flow.\n   */\n  public oidc? = true;\n\n  /**\n   * Defines whether to request a access token during\n   * implicit flow.\n   */\n  public requestAccessToken? = true;\n\n  public options?: any = null;\n\n  /**\n   * The issuer's uri.\n   */\n  public issuer? = '';\n\n  /**\n   * The logout url.\n   */\n  public logoutUrl? = '';\n\n  /**\n   * Defines whether to clear the hash fragment after logging in.\n   */\n  public clearHashAfterLogin? = true;\n\n  /**\n   * Url of the token endpoint as defined by OpenId Connect and OAuth 2.\n   */\n  public tokenEndpoint?: string = null;\n\n  /**\n   * Url of the userinfo endpoint as defined by OpenId Connect.\n   *\n   */\n  public userinfoEndpoint?: string = null;\n\n  public responseType? = 'token';\n\n  /**\n   * Defines whether additional debug information should\n   * be shown at the console. Note that in certain browsers\n   * the verbosity of the console needs to be explicitly set\n   * to include Debug level messages.\n   */\n   public showDebugInformation? = false;\n\n  /**\n   * The redirect uri used when doing silent refresh.\n   */\n  public silentRefreshRedirectUri? = '';\n\n  public silentRefreshMessagePrefix? = '';\n\n  /**\n   * Set this to true to display the iframe used for\n   * silent refresh for debugging.\n   */\n  public silentRefreshShowIFrame? = false;\n\n  /**\n   * Timeout for silent refresh.\n   * @internal\n   * depreacted b/c of typo, see silentRefreshTimeout\n   */\n  public siletRefreshTimeout?: number = 1000 * 20;\n\n  /**\n   * Timeout for silent refresh.\n   */\n  public silentRefreshTimeout?: number = 1000 * 20;\n\n  /**\n   * Some auth servers don't allow using password flow\n   * w/o a client secreat while the standards do not\n   * demand for it. In this case, you can set a password\n   * here. As this passwort is exposed to the public\n   * it does not bring additional security and is therefore\n   * as good as using no password.\n   */\n  public dummyClientSecret?: string = null;\n\n  /**\n   * Defines whether https is required.\n   * The default value is remoteOnly which only allows\n   * http for localhost, while every other domains need\n   * to be used with https.\n   */\n  public requireHttps?: boolean | 'remoteOnly' = 'remoteOnly';\n\n  /**\n   * Defines whether every url provided by the discovery\n   * document has to start with the issuer's url.\n   */\n  public strictDiscoveryDocumentValidation? = true;\n\n  /**\n   * JSON Web Key Set (https://tools.ietf.org/html/rfc7517)\n   * with keys used to validate received id_tokens.\n   * This is taken out of the disovery document. Can be set manually too.\n   */\n  public jwks?: object = null;\n\n  /**\n   * Map with additional query parameter that are appended to\n   * the request when initializing implicit flow.\n   */\n  public customQueryParams?: object = null;\n\n  public silentRefreshIFrameName? = 'angular-oauth-oidc-silent-refresh-iframe';\n\n  /**\n   * Defines when the token_timeout event should be raised.\n   * If you set this to the default value 0.75, the event\n   * is triggered after 75% of the token's life time.\n   */\n  public timeoutFactor? = 0.75;\n\n  /**\n   * If true, the lib will try to check whether the user\n   * is still logged in on a regular basis as described\n   * in http://openid.net/specs/openid-connect-session-1_0.html#ChangeNotification\n   */\n  public sessionChecksEnabled? = false;\n\n  /**\n   * Intervall in msec for checking the session\n   * according to http://openid.net/specs/openid-connect-session-1_0.html#ChangeNotification\n   */\n  public sessionCheckIntervall? = 3 * 1000;\n\n  /**\n   * Url for the iframe used for session checks\n   */\n  public sessionCheckIFrameUrl?: string = null;\n\n  /**\n   * Name of the iframe to use for session checks\n   */\n  public sessionCheckIFrameName? = 'angular-oauth-oidc-check-session-iframe';\n\n  /**\n   * This property has been introduced to disable at_hash checks\n   * and is indented for Identity Provider that does not deliver\n   * an at_hash EVEN THOUGH its recommended by the OIDC specs.\n   * Of course, when disabling these checks the we are bypassing\n   * a security check which means we are more vulnerable.\n   */\n  public disableAtHashCheck? = false;\n\n  /*\n     * Defines wether to check the subject of a refreshed token after silent refresh.\n     * Normally, it should be the same as before.\n    */\n  public skipSubjectCheck? = false;\n\n  public useIdTokenHintForSilentRefresh? = false;\n\n  /*\n     * Defined whether to skip the validation of the issuer in the discovery document.\n     * Normally, the discovey document's url starts with the url of the issuer.\n     */\n  public skipIssuerCheck? = false;\n\n  /**\n   * According to rfc6749 it is recommended (but not required) that the auth\n   * server exposes the access_token's life time in seconds.\n   * This is a fallback value for the case this value is not exposed.\n   */\n  public fallbackAccessTokenExpirationTimeInSec?: number;\n\n  /*\n     * final state sent to issuer is built as follows:\n     * state = nonce + nonceStateSeparator + additional state\n     * Default separator is ';' (encoded %3B).\n     * In rare cases, this character might be forbidden or inconvenient to use by the issuer so it can be customized.\n     */\n  public nonceStateSeparator? = ';';\n\n  /*\n   * set this to true to use HTTP BASIC auth for password flow\n  */\n  public useHttpBasicAuthForPasswordFlow? = false;\n\n  constructor(json?: Partial<AuthConfig>) {\n    if (json) {\n      Object.assign(this, json);\n    }\n  }\n\n  /**\n   * This property allows you to override the method that is used to open the login url,\n   * allowing a way for implementations to specify their own method of routing to new\n   * urls.\n   */\n  public openUri?: ((uri: string) => void) = uri => {\n    location.href = uri;\n  }\n}\n",
    "import { HttpParameterCodec } from '@angular/common/http';\n/**\n * This custom encoder allows charactes like +, % and / to be used in passwords\n */\nexport class WebHttpUrlEncodingCodec implements HttpParameterCodec {\n  encodeKey(k: string): string {\n    return encodeURIComponent(k);\n  }\n\n  encodeValue(v: string): string {\n    return encodeURIComponent(v);\n  }\n\n  decodeKey(k: string): string {\n    return decodeURIComponent(k);\n  }\n\n  decodeValue(v: string) {\n    return decodeURIComponent(v);\n  }\n}\n",
    "import { Injectable, NgZone, Optional } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Observable, Subject, Subscription, of, race } from 'rxjs';\nimport { filter, take, delay, first, tap, map } from 'rxjs/operators';\n\nimport {\n    ValidationHandler,\n    ValidationParams\n} from './token-validation/validation-handler';\nimport { UrlHelperService } from './url-helper.service';\nimport {\n    OAuthEvent,\n    OAuthInfoEvent,\n    OAuthErrorEvent,\n    OAuthSuccessEvent\n} from './events';\nimport {\n    OAuthStorage,\n    LoginOptions,\n    ParsedIdToken,\n    OidcDiscoveryDoc,\n    TokenResponse,\n    UserInfo\n} from './types';\nimport { b64DecodeUnicode } from './base64-helper';\nimport { AuthConfig } from './auth.config';\nimport { WebHttpUrlEncodingCodec } from './encoder';\n\n/**\n * Service for logging in and logging out with\n * OIDC and OAuth2. Supports implicit flow and\n * password flow.\n */\n@Injectable()\nexport class OAuthService extends AuthConfig {\n    // extending AuthConfig ist just for LEGACY reasons\n    // to not break existing code\n\n    /**\n     * The ValidationHandler used to validate received\n     * id_tokens.\n     */\n    public tokenValidationHandler: ValidationHandler;\n\n    /**\n     * @internal\n     * Deprecated:  use property events instead\n     */\n    public discoveryDocumentLoaded = false;\n\n    /**\n     * @internal\n     * Deprecated:  use property events instead\n     */\n    public discoveryDocumentLoaded$: Observable<object>;\n\n    /**\n     * Informs about events, like token_received or token_expires.\n     * See the string enum EventType for a full list of events.\n     */\n    public events: Observable<OAuthEvent>;\n\n    /**\n     * The received (passed around) state, when logging\n     * in with implicit flow.\n     */\n    public state?= '';\n\n    private eventsSubject: Subject<OAuthEvent> = new Subject<OAuthEvent>();\n    private discoveryDocumentLoadedSubject: Subject<object> = new Subject<\n        object\n        >();\n    private silentRefreshPostMessageEventListener: EventListener;\n    private grantTypesSupported: Array<string> = [];\n    private _storage: OAuthStorage;\n    private accessTokenTimeoutSubscription: Subscription;\n    private idTokenTimeoutSubscription: Subscription;\n    private sessionCheckEventListener: EventListener;\n    private jwksUri: string;\n    private sessionCheckTimer: any;\n    private silentRefreshSubject: string;\n    private inImplicitFlow = false;\n\n    constructor(\n        private ngZone: NgZone,\n        private http: HttpClient,\n        @Optional() storage: OAuthStorage,\n        @Optional() tokenValidationHandler: ValidationHandler,\n        @Optional() private config: AuthConfig,\n        private urlHelper: UrlHelperService\n    ) {\n        super();\n\n        this.discoveryDocumentLoaded$ = this.discoveryDocumentLoadedSubject.asObservable();\n        this.events = this.eventsSubject.asObservable();\n\n        if (tokenValidationHandler) {\n            this.tokenValidationHandler = tokenValidationHandler;\n        }\n\n        if (config) {\n            this.configure(config);\n        }\n\n        try {\n            if (storage) {\n                this.setStorage(storage);\n            } else if (typeof sessionStorage !== 'undefined') {\n                this.setStorage(sessionStorage);\n            }\n        } catch (e) {\n            console.error(\n                'cannot access sessionStorage. Consider setting an own storage implementation using setStorage',\n                e\n            );\n        }\n        this.setupRefreshTimer();\n    }\n\n    /**\n     * Use this method to configure the service\n     * @param config the configuration\n     */\n    public configure(config: AuthConfig) {\n        // For the sake of downward compatibility with\n        // original configuration API\n        Object.assign(this, new AuthConfig(), config);\n\n        this.config = Object.assign({} as AuthConfig, new AuthConfig(), config);\n\n        if (this.sessionChecksEnabled) {\n            this.setupSessionCheck();\n        }\n\n        this.configChanged();\n    }\n\n    private configChanged(): void { }\n\n    public restartSessionChecksIfStillLoggedIn(): void {\n        if (this.hasValidIdToken()) {\n            this.initSessionCheck();\n        }\n    }\n\n    private restartRefreshTimerIfStillLoggedIn(): void {\n        this.setupExpirationTimers();\n    }\n\n    private setupSessionCheck() {\n        this.events.pipe(filter(e => e.type === 'token_received')).subscribe(e => {\n            this.initSessionCheck();\n        });\n    }\n\n    /**\n     *\n     * @param params Additional parameter to pass\n     */\n    public setupAutomaticSilentRefresh(params: object = {}) {\n        this.events.pipe(filter(e => e.type === 'token_expires')).subscribe(e => {\n            this.silentRefresh(params).catch(_ => {\n                this.debug('automatic silent refresh did not work');\n            });\n        });\n\n        this.restartRefreshTimerIfStillLoggedIn();\n    }\n\n    public loadDiscoveryDocumentAndTryLogin(options: LoginOptions = null) {\n        return this.loadDiscoveryDocument().then(doc => {\n            return this.tryLogin(options);\n        });\n    }\n\n    public loadDiscoveryDocumentAndLogin(options: LoginOptions = null) {\n        return this.loadDiscoveryDocumentAndTryLogin(options).then(_ => {\n            if (!this.hasValidIdToken() || !this.hasValidAccessToken()) {\n                this.initImplicitFlow();\n                return false;\n            } else {\n                return true;\n            }\n        });\n    }\n\n    private debug(...args): void {\n        if (this.showDebugInformation) {\n            console.debug.apply(console, args);\n        }\n    }\n\n    private validateUrlFromDiscoveryDocument(url: string): string[] {\n        const errors: string[] = [];\n        const httpsCheck = this.validateUrlForHttps(url);\n        const issuerCheck = this.validateUrlAgainstIssuer(url);\n\n        if (!httpsCheck) {\n            errors.push(\n                'https for all urls required. Also for urls received by discovery.'\n            );\n        }\n\n        if (!issuerCheck) {\n            errors.push(\n                'Every url in discovery document has to start with the issuer url.' +\n                'Also see property strictDiscoveryDocumentValidation.'\n            );\n        }\n\n        return errors;\n    }\n\n    private validateUrlForHttps(url: string): boolean {\n        if (!url) {\n            return true;\n        }\n\n        const lcUrl = url.toLowerCase();\n\n        if (this.requireHttps === false) {\n            return true;\n        }\n\n        if (\n            (lcUrl.match(/^http:\\/\\/localhost($|[:\\/])/) ||\n                lcUrl.match(/^http:\\/\\/localhost($|[:\\/])/)) &&\n            this.requireHttps === 'remoteOnly'\n        ) {\n            return true;\n        }\n\n        return lcUrl.startsWith('https://');\n    }\n\n    private validateUrlAgainstIssuer(url: string) {\n        if (!this.strictDiscoveryDocumentValidation) {\n            return true;\n        }\n        if (!url) {\n            return true;\n        }\n        return url.toLowerCase().startsWith(this.issuer.toLowerCase());\n    }\n\n    private setupRefreshTimer(): void {\n        if (typeof window === 'undefined') {\n            this.debug('timer not supported on this plattform');\n            return;\n        }\n\n        if (this.hasValidIdToken()) {\n            this.clearAccessTokenTimer();\n            this.clearIdTokenTimer();\n            this.setupExpirationTimers();\n        }\n\n        this.events.pipe(filter(e => e.type === 'token_received')).subscribe(_ => {\n            this.clearAccessTokenTimer();\n            this.clearIdTokenTimer();\n            this.setupExpirationTimers();\n        });\n    }\n\n    private setupExpirationTimers(): void {\n        const idTokenExp = this.getIdTokenExpiration() || Number.MAX_VALUE;\n        const accessTokenExp = this.getAccessTokenExpiration() || Number.MAX_VALUE;\n        const useAccessTokenExp = accessTokenExp <= idTokenExp;\n\n        if (this.hasValidAccessToken() && useAccessTokenExp) {\n            this.setupAccessTokenTimer();\n        }\n\n        if (this.hasValidIdToken() && !useAccessTokenExp) {\n            this.setupIdTokenTimer();\n        }\n    }\n\n    private setupAccessTokenTimer(): void {\n        const expiration = this.getAccessTokenExpiration();\n        const storedAt = this.getAccessTokenStoredAt();\n        const timeout = this.calcTimeout(storedAt, expiration);\n\n        this.ngZone.runOutsideAngular(() => {\n            this.accessTokenTimeoutSubscription = of(\n                new OAuthInfoEvent('token_expires', 'access_token')\n            )\n                .pipe(delay(timeout))\n                .subscribe(e => {\n                    this.ngZone.run(() => {\n                        this.eventsSubject.next(e);\n                    });\n                });\n        });\n    }\n\n    private setupIdTokenTimer(): void {\n        const expiration = this.getIdTokenExpiration();\n        const storedAt = this.getIdTokenStoredAt();\n        const timeout = this.calcTimeout(storedAt, expiration);\n\n        this.ngZone.runOutsideAngular(() => {\n            this.idTokenTimeoutSubscription = of(\n                new OAuthInfoEvent('token_expires', 'id_token')\n            )\n                .pipe(delay(timeout))\n                .subscribe(e => {\n                    this.ngZone.run(() => {\n                        this.eventsSubject.next(e);\n                    });\n                });\n        });\n    }\n\n    private clearAccessTokenTimer(): void {\n        if (this.accessTokenTimeoutSubscription) {\n            this.accessTokenTimeoutSubscription.unsubscribe();\n        }\n    }\n\n    private clearIdTokenTimer(): void {\n        if (this.idTokenTimeoutSubscription) {\n            this.idTokenTimeoutSubscription.unsubscribe();\n        }\n    }\n\n    private calcTimeout(storedAt: number, expiration: number): number {\n        const delta = (expiration - storedAt) * this.timeoutFactor;\n        return delta;\n    }\n\n    /**\n     * DEPRECATED. Use a provider for OAuthStorage instead:\n     *\n     * { provide: OAuthStorage, useValue: localStorage }\n     *\n     * Sets a custom storage used to store the received\n     * tokens on client side. By default, the browser's\n     * sessionStorage is used.\n     * @ignore\n     *\n     * @param storage\n     */\n    public setStorage(storage: OAuthStorage): void {\n        this._storage = storage;\n        this.configChanged();\n    }\n\n    /**\n     * Loads the discovery document to configure most\n     * properties of this service. The url of the discovery\n     * document is infered from the issuer's url according\n     * to the OpenId Connect spec. To use another url you\n     * can pass it to to optional parameter fullUrl.\n     *\n     * @param fullUrl\n     */\n    public loadDiscoveryDocument(fullUrl: string = null): Promise<object> {\n        return new Promise((resolve, reject) => {\n            if (!fullUrl) {\n                fullUrl = this.issuer || '';\n                if (!fullUrl.endsWith('/')) {\n                    fullUrl += '/';\n                }\n                fullUrl += '.well-known/openid-configuration';\n            }\n\n            if (!this.validateUrlForHttps(fullUrl)) {\n                reject('issuer must use Https. Also check property requireHttps.');\n                return;\n            }\n\n            this.http.get<OidcDiscoveryDoc>(fullUrl).subscribe(\n                doc => {\n                    if (!this.validateDiscoveryDocument(doc)) {\n                        this.eventsSubject.next(\n                            new OAuthErrorEvent('discovery_document_validation_error', null)\n                        );\n                        reject('discovery_document_validation_error');\n                        return;\n                    }\n\n                    this.loginUrl = doc.authorization_endpoint;\n                    this.logoutUrl = doc.end_session_endpoint || this.logoutUrl;\n                    this.grantTypesSupported = doc.grant_types_supported;\n                    this.issuer = doc.issuer;\n                    this.tokenEndpoint = doc.token_endpoint;\n                    this.userinfoEndpoint = doc.userinfo_endpoint;\n                    this.jwksUri = doc.jwks_uri;\n                    this.sessionCheckIFrameUrl = doc.check_session_iframe || this.sessionCheckIFrameUrl;\n\n                    this.discoveryDocumentLoaded = true;\n                    this.discoveryDocumentLoadedSubject.next(doc);\n\n                    if (this.sessionChecksEnabled) {\n                        this.restartSessionChecksIfStillLoggedIn();\n                    }\n\n                    this.loadJwks()\n                        .then(jwks => {\n                            const result: object = {\n                                discoveryDocument: doc,\n                                jwks: jwks\n                            };\n\n                            const event = new OAuthSuccessEvent(\n                                'discovery_document_loaded',\n                                result\n                            );\n                            this.eventsSubject.next(event);\n                            resolve(event);\n                            return;\n                        })\n                        .catch(err => {\n                            this.eventsSubject.next(\n                                new OAuthErrorEvent('discovery_document_load_error', err)\n                            );\n                            reject(err);\n                            return;\n                        });\n                },\n                err => {\n                    console.error('error loading discovery document', err);\n                    this.eventsSubject.next(\n                        new OAuthErrorEvent('discovery_document_load_error', err)\n                    );\n                    reject(err);\n                }\n            );\n        });\n    }\n\n    private loadJwks(): Promise<object> {\n        return new Promise<object>((resolve, reject) => {\n            if (this.jwksUri) {\n                this.http.get(this.jwksUri).subscribe(\n                    jwks => {\n                        this.jwks = jwks;\n                        this.eventsSubject.next(\n                            new OAuthSuccessEvent('discovery_document_loaded')\n                        );\n                        resolve(jwks);\n                    },\n                    err => {\n                        console.error('error loading jwks', err);\n                        this.eventsSubject.next(\n                            new OAuthErrorEvent('jwks_load_error', err)\n                        );\n                        reject(err);\n                    }\n                );\n            } else {\n                resolve(null);\n            }\n        });\n    }\n\n    private validateDiscoveryDocument(doc: OidcDiscoveryDoc): boolean {\n        let errors: string[];\n\n        if (!this.skipIssuerCheck && doc.issuer !== this.issuer) {\n            console.error(\n                'invalid issuer in discovery document',\n                'expected: ' + this.issuer,\n                'current: ' + doc.issuer\n            );\n            return false;\n        }\n\n        errors = this.validateUrlFromDiscoveryDocument(doc.authorization_endpoint);\n        if (errors.length > 0) {\n            console.error(\n                'error validating authorization_endpoint in discovery document',\n                errors\n            );\n            return false;\n        }\n\n        errors = this.validateUrlFromDiscoveryDocument(doc.end_session_endpoint);\n        if (errors.length > 0) {\n            console.error(\n                'error validating end_session_endpoint in discovery document',\n                errors\n            );\n            return false;\n        }\n\n        errors = this.validateUrlFromDiscoveryDocument(doc.token_endpoint);\n        if (errors.length > 0) {\n            console.error(\n                'error validating token_endpoint in discovery document',\n                errors\n            );\n        }\n\n        errors = this.validateUrlFromDiscoveryDocument(doc.userinfo_endpoint);\n        if (errors.length > 0) {\n            console.error(\n                'error validating userinfo_endpoint in discovery document',\n                errors\n            );\n            return false;\n        }\n\n        errors = this.validateUrlFromDiscoveryDocument(doc.jwks_uri);\n        if (errors.length > 0) {\n            console.error('error validating jwks_uri in discovery document', errors);\n            return false;\n        }\n\n        if (this.sessionChecksEnabled && !doc.check_session_iframe) {\n            console.warn(\n                'sessionChecksEnabled is activated but discovery document' +\n                ' does not contain a check_session_iframe field'\n            );\n        }\n\n        // this.sessionChecksEnabled = !!doc.check_session_iframe;\n\n        return true;\n    }\n\n    /**\n     * Uses password flow to exchange userName and password for an\n     * access_token. After receiving the access_token, this method\n     * uses it to query the userinfo endpoint in order to get information\n     * about the user in question.\n     *\n     * When using this, make sure that the property oidc is set to false.\n     * Otherwise stricter validations take happen that makes this operation\n     * fail.\n     *\n     * @param userName\n     * @param password\n     * @param headers Optional additional http-headers.\n     */\n    public fetchTokenUsingPasswordFlowAndLoadUserProfile(\n        userName: string,\n        password: string,\n        headers: HttpHeaders = new HttpHeaders()\n    ): Promise<object> {\n        return this.fetchTokenUsingPasswordFlow(userName, password, headers).then(\n            () => this.loadUserProfile()\n        );\n    }\n\n    /**\n     * Loads the user profile by accessing the user info endpoint defined by OpenId Connect.\n     *\n     * When using this with OAuth2 password flow, make sure that the property oidc is set to false.\n     * Otherwise stricter validations take happen that makes this operation\n     * fail.\n     */\n    public loadUserProfile(): Promise<object> {\n        if (!this.hasValidAccessToken()) {\n            throw new Error('Can not load User Profile without access_token');\n        }\n        if (!this.validateUrlForHttps(this.userinfoEndpoint)) {\n            throw new Error(\n                'userinfoEndpoint must use Http. Also check property requireHttps.'\n            );\n        }\n\n        return new Promise((resolve, reject) => {\n            const headers = new HttpHeaders().set(\n                'Authorization',\n                'Bearer ' + this.getAccessToken()\n            );\n\n            this.http.get<UserInfo>(this.userinfoEndpoint, { headers }).subscribe(\n                info => {\n                    this.debug('userinfo received', info);\n\n                    const existingClaims = this.getIdentityClaims() || {};\n\n                    if (!this.skipSubjectCheck) {\n                        if (\n                            this.oidc &&\n                            (!existingClaims['sub'] || info.sub !== existingClaims['sub'])\n                        ) {\n                            const err =\n                                'if property oidc is true, the received user-id (sub) has to be the user-id ' +\n                                'of the user that has logged in with oidc.\\n' +\n                                'if you are not using oidc but just oauth2 password flow set oidc to false';\n\n                            reject(err);\n                            return;\n                        }\n                    }\n\n                    info = Object.assign({}, existingClaims, info);\n\n                    this._storage.setItem('id_token_claims_obj', JSON.stringify(info));\n                    this.eventsSubject.next(new OAuthSuccessEvent('user_profile_loaded'));\n                    resolve(info);\n                },\n                err => {\n                    console.error('error loading user info', err);\n                    this.eventsSubject.next(\n                        new OAuthErrorEvent('user_profile_load_error', err)\n                    );\n                    reject(err);\n                }\n            );\n        });\n    }\n\n    /**\n     * Uses password flow to exchange userName and password for an access_token.\n     * @param userName\n     * @param password\n     * @param headers Optional additional http-headers.\n     */\n    public fetchTokenUsingPasswordFlow(\n        userName: string,\n        password: string,\n        headers: HttpHeaders = new HttpHeaders()\n    ): Promise<object> {\n        if (!this.validateUrlForHttps(this.tokenEndpoint)) {\n            throw new Error(\n                'tokenEndpoint must use Http. Also check property requireHttps.'\n            );\n        }\n\n        return new Promise((resolve, reject) => {\n            /**\n             * A `HttpParameterCodec` that uses `encodeURIComponent` and `decodeURIComponent` to\n             * serialize and parse URL parameter keys and values.\n             *\n             * @stable\n             */\n            let params = new HttpParams({ encoder: new WebHttpUrlEncodingCodec() })\n                .set('grant_type', 'password')\n                .set('scope', this.scope)\n                .set('username', userName)\n                .set('password', password);\n\n            if (this.useHttpBasicAuthForPasswordFlow) {\n                const header = btoa(`${this.clientId}:${this.dummyClientSecret}`);\n                headers = headers.set(\n                    'Authentication',\n                    'BASIC ' + header);\n            }\n\n            if (!this.useHttpBasicAuthForPasswordFlow) {\n                params = params.set('client_id', this.clientId);\n            }\n\n            if (!this.useHttpBasicAuthForPasswordFlow && this.dummyClientSecret) {\n                params = params.set('client_secret', this.dummyClientSecret);\n            }\n\n            if (this.customQueryParams) {\n                for (const key of Object.getOwnPropertyNames(this.customQueryParams)) {\n                    params = params.set(key, this.customQueryParams[key]);\n                }\n            }\n\n            headers = headers.set(\n                'Content-Type',\n                'application/x-www-form-urlencoded'\n            );\n\n            this.http\n                .post<TokenResponse>(this.tokenEndpoint, params, { headers })\n                .subscribe(\n                    tokenResponse => {\n                        this.debug('tokenResponse', tokenResponse);\n                        this.storeAccessTokenResponse(\n                            tokenResponse.access_token,\n                            tokenResponse.refresh_token,\n                            tokenResponse.expires_in,\n                            tokenResponse.scope\n                        );\n\n                        this.eventsSubject.next(new OAuthSuccessEvent('token_received'));\n                        resolve(tokenResponse);\n                    },\n                    err => {\n                        console.error('Error performing password flow', err);\n                        this.eventsSubject.next(new OAuthErrorEvent('token_error', err));\n                        reject(err);\n                    }\n                );\n        });\n    }\n\n    /**\n     * Refreshes the token using a refresh_token.\n     * This does not work for implicit flow, b/c\n     * there is no refresh_token in this flow.\n     * A solution for this is provided by the\n     * method silentRefresh.\n     */\n    public refreshToken(): Promise<object> {\n        if (!this.validateUrlForHttps(this.tokenEndpoint)) {\n            throw new Error(\n                'tokenEndpoint must use Http. Also check property requireHttps.'\n            );\n        }\n\n        return new Promise((resolve, reject) => {\n            let params = new HttpParams()\n                .set('grant_type', 'refresh_token')\n                .set('client_id', this.clientId)\n                .set('scope', this.scope)\n                .set('refresh_token', this._storage.getItem('refresh_token'));\n\n            if (this.dummyClientSecret) {\n                params = params.set('client_secret', this.dummyClientSecret);\n            }\n\n            if (this.customQueryParams) {\n                for (const key of Object.getOwnPropertyNames(this.customQueryParams)) {\n                    params = params.set(key, this.customQueryParams[key]);\n                }\n            }\n\n            const headers = new HttpHeaders().set(\n                'Content-Type',\n                'application/x-www-form-urlencoded'\n            );\n\n            this.http\n                .post<TokenResponse>(this.tokenEndpoint, params, { headers })\n                .subscribe(\n                    tokenResponse => {\n                        this.debug('refresh tokenResponse', tokenResponse);\n                        this.storeAccessTokenResponse(\n                            tokenResponse.access_token,\n                            tokenResponse.refresh_token,\n                            tokenResponse.expires_in,\n                            tokenResponse.scope\n                        );\n\n                        this.eventsSubject.next(new OAuthSuccessEvent('token_received'));\n                        this.eventsSubject.next(new OAuthSuccessEvent('token_refreshed'));\n                        resolve(tokenResponse);\n                    },\n                    err => {\n                        console.error('Error performing password flow', err);\n                        this.eventsSubject.next(\n                            new OAuthErrorEvent('token_refresh_error', err)\n                        );\n                        reject(err);\n                    }\n                );\n        });\n    }\n\n    private removeSilentRefreshEventListener(): void {\n        if (this.silentRefreshPostMessageEventListener) {\n            window.removeEventListener(\n                'message',\n                this.silentRefreshPostMessageEventListener\n            );\n            this.silentRefreshPostMessageEventListener = null;\n        }\n    }\n\n    private setupSilentRefreshEventListener(): void {\n        this.removeSilentRefreshEventListener();\n\n        this.silentRefreshPostMessageEventListener = (e: MessageEvent) => {\n            let expectedPrefix = '#';\n\n            if (this.silentRefreshMessagePrefix) {\n                expectedPrefix += this.silentRefreshMessagePrefix;\n            }\n\n            if (!e || !e.data || typeof e.data !== 'string') {\n                return;\n            }\n\n            const prefixedMessage: string = e.data;\n\n            if (!prefixedMessage.startsWith(expectedPrefix)) {\n                return;\n            }\n\n            const message = '#' + prefixedMessage.substr(expectedPrefix.length);\n\n            this.tryLogin({\n                customHashFragment: message,\n                preventClearHashAfterLogin: true,\n                onLoginError: err => {\n                    this.eventsSubject.next(\n                        new OAuthErrorEvent('silent_refresh_error', err)\n                    );\n                },\n                onTokenReceived: () => {\n                    this.eventsSubject.next(new OAuthSuccessEvent('silently_refreshed'));\n                }\n            }).catch(err => this.debug('tryLogin during silent refresh failed', err));\n        };\n\n        window.addEventListener(\n            'message',\n            this.silentRefreshPostMessageEventListener\n        );\n    }\n\n    /**\n     * Performs a silent refresh for implicit flow.\n     * Use this method to get a new tokens when/ before\n     * the existing tokens expires.\n     */\n    public silentRefresh(params: object = {}, noPrompt = true): Promise<OAuthEvent> {\n        const claims: object = this.getIdentityClaims() || {};\n\n        if (this.useIdTokenHintForSilentRefresh && this.hasValidIdToken()) {\n            params['id_token_hint'] = this.getIdToken();\n        }\n\n        /*\n            if (!claims) {\n                throw new Error('cannot perform a silent refresh as the user is not logged in');\n            }\n            */\n\n        if (!this.validateUrlForHttps(this.loginUrl)) {\n            throw new Error(\n                'tokenEndpoint must use Https. Also check property requireHttps.'\n            );\n        }\n\n        if (typeof document === 'undefined') {\n            throw new Error('silent refresh is not supported on this platform');\n        }\n\n        const existingIframe = document.getElementById(\n            this.silentRefreshIFrameName\n        );\n        if (existingIframe) {\n            document.body.removeChild(existingIframe);\n        }\n\n        this.silentRefreshSubject = claims['sub'];\n\n        const iframe = document.createElement('iframe');\n        iframe.id = this.silentRefreshIFrameName;\n\n        this.setupSilentRefreshEventListener();\n\n        const redirectUri = this.silentRefreshRedirectUri || this.redirectUri;\n        this.createLoginUrl(null, null, redirectUri, noPrompt, params).then(url => {\n            iframe.setAttribute('src', url);\n\n            if (!this.silentRefreshShowIFrame) {\n                iframe.style['display'] = 'none';\n            }\n            document.body.appendChild(iframe);\n        });\n\n        const errors = this.events.pipe(\n            filter(e => e instanceof OAuthErrorEvent),\n            first()\n        );\n        const success = this.events.pipe(\n            filter(e => e.type === 'silently_refreshed'),\n            first()\n        );\n        const timeout = of(\n            new OAuthErrorEvent('silent_refresh_timeout', null)\n        ).pipe(delay(this.silentRefreshTimeout));\n\n        return race([errors, success, timeout])\n            .pipe(\n                tap(e => {\n                    if (e.type === 'silent_refresh_timeout') {\n                        this.eventsSubject.next(e);\n                    }\n                }),\n                map(e => {\n                    if (e instanceof OAuthErrorEvent) {\n                        throw e;\n                    }\n                    return e;\n                })\n            )\n            .toPromise();\n    }\n\n    private canPerformSessionCheck(): boolean {\n        if (!this.sessionChecksEnabled) {\n            return false;\n        }\n        if (!this.sessionCheckIFrameUrl) {\n            console.warn(\n                'sessionChecksEnabled is activated but there ' +\n                'is no sessionCheckIFrameUrl'\n            );\n            return false;\n        }\n        const sessionState = this.getSessionState();\n        if (!sessionState) {\n            console.warn(\n                'sessionChecksEnabled is activated but there ' + 'is no session_state'\n            );\n            return false;\n        }\n        if (typeof document === 'undefined') {\n            return false;\n        }\n\n        return true;\n    }\n\n    private setupSessionCheckEventListener(): void {\n        this.removeSessionCheckEventListener();\n\n        this.sessionCheckEventListener = (e: MessageEvent) => {\n            const origin = e.origin.toLowerCase();\n            const issuer = this.issuer.toLowerCase();\n\n            this.debug('sessionCheckEventListener');\n\n            if (!issuer.startsWith(origin)) {\n                this.debug(\n                    'sessionCheckEventListener',\n                    'wrong origin',\n                    origin,\n                    'expected',\n                    issuer\n                );\n            }\n\n            switch (e.data) {\n                case 'unchanged':\n                    this.handleSessionUnchanged();\n                    break;\n                case 'changed':\n                    this.handleSessionChange();\n                    break;\n                case 'error':\n                    this.handleSessionError();\n                    break;\n            }\n\n            this.debug('got info from session check inframe', e);\n        };\n\n        window.addEventListener('message', this.sessionCheckEventListener);\n    }\n\n    private handleSessionUnchanged(): void {\n        this.debug('session check', 'session unchanged');\n    }\n\n    private handleSessionChange(): void {\n        /* events: session_changed, relogin, stopTimer, logged_out*/\n        this.eventsSubject.next(new OAuthInfoEvent('session_changed'));\n        this.stopSessionCheckTimer();\n        if (this.silentRefreshRedirectUri) {\n            this.silentRefresh().catch(_ =>\n                this.debug('silent refresh failed after session changed')\n            );\n            this.waitForSilentRefreshAfterSessionChange();\n        } else {\n            this.eventsSubject.next(new OAuthInfoEvent('session_terminated'));\n            this.logOut(true);\n        }\n    }\n\n    private waitForSilentRefreshAfterSessionChange() {\n        this.events\n            .pipe(\n                filter(\n                    (e: OAuthEvent) =>\n                        e.type === 'silently_refreshed' ||\n                        e.type === 'silent_refresh_timeout' ||\n                        e.type === 'silent_refresh_error'\n                ),\n                first()\n            )\n            .subscribe(e => {\n                if (e.type !== 'silently_refreshed') {\n                    this.debug('silent refresh did not work after session changed');\n                    this.eventsSubject.next(new OAuthInfoEvent('session_terminated'));\n                    this.logOut(true);\n                }\n            });\n    }\n\n    private handleSessionError(): void {\n        this.stopSessionCheckTimer();\n        this.eventsSubject.next(new OAuthInfoEvent('session_error'));\n    }\n\n    private removeSessionCheckEventListener(): void {\n        if (this.sessionCheckEventListener) {\n            window.removeEventListener('message', this.sessionCheckEventListener);\n            this.sessionCheckEventListener = null;\n        }\n    }\n\n    private initSessionCheck(): void {\n        if (!this.canPerformSessionCheck()) {\n            return;\n        }\n\n        const existingIframe = document.getElementById(this.sessionCheckIFrameName);\n        if (existingIframe) {\n            document.body.removeChild(existingIframe);\n        }\n\n        const iframe = document.createElement('iframe');\n        iframe.id = this.sessionCheckIFrameName;\n\n        this.setupSessionCheckEventListener();\n\n        const url = this.sessionCheckIFrameUrl;\n        iframe.setAttribute('src', url);\n        // iframe.style.visibility = 'hidden';\n        iframe.style.display = 'none';\n        document.body.appendChild(iframe);\n\n        this.startSessionCheckTimer();\n    }\n\n    private startSessionCheckTimer(): void {\n        this.stopSessionCheckTimer();\n        this.sessionCheckTimer = setInterval(\n            this.checkSession.bind(this),\n            this.sessionCheckIntervall\n        );\n    }\n\n    private stopSessionCheckTimer(): void {\n        if (this.sessionCheckTimer) {\n            clearInterval(this.sessionCheckTimer);\n            this.sessionCheckTimer = null;\n        }\n    }\n\n    private checkSession(): void {\n        const iframe: any = document.getElementById(this.sessionCheckIFrameName);\n\n        if (!iframe) {\n            console.warn(\n                'checkSession did not find iframe',\n                this.sessionCheckIFrameName\n            );\n        }\n\n        const sessionState = this.getSessionState();\n\n        if (!sessionState) {\n            this.stopSessionCheckTimer();\n        }\n\n        const message = this.clientId + ' ' + sessionState;\n        iframe.contentWindow.postMessage(message, this.issuer);\n    }\n\n    private createLoginUrl(\n        state = '',\n        loginHint = '',\n        customRedirectUri = '',\n        noPrompt = false,\n        params: object = {}\n    ) {\n        const that = this;\n\n        let redirectUri: string;\n\n        if (customRedirectUri) {\n            redirectUri = customRedirectUri;\n        } else {\n            redirectUri = this.redirectUri;\n        }\n\n        return this.createAndSaveNonce().then((nonce: any) => {\n            if (state) {\n                state = nonce + this.config.nonceStateSeparator + state;\n            } else {\n                state = nonce;\n            }\n\n            if (!this.requestAccessToken && !this.oidc) {\n                throw new Error(\n                    'Either requestAccessToken or oidc or both must be true'\n                );\n            }\n\n            if (this.oidc && this.requestAccessToken) {\n                this.responseType = 'id_token token';\n            } else if (this.oidc && !this.requestAccessToken) {\n                this.responseType = 'id_token';\n            } else {\n                this.responseType = 'token';\n            }\n\n            const seperationChar = that.loginUrl.indexOf('?') > -1 ? '&' : '?';\n\n            let scope = that.scope;\n\n            if (this.oidc && !scope.match(/(^|\\s)openid($|\\s)/)) {\n                scope = 'openid ' + scope;\n            }\n\n            let url =\n                that.loginUrl +\n                seperationChar +\n                'response_type=' +\n                encodeURIComponent(that.responseType) +\n                '&client_id=' +\n                encodeURIComponent(that.clientId) +\n                '&state=' +\n                encodeURIComponent(state) +\n                '&redirect_uri=' +\n                encodeURIComponent(redirectUri) +\n                '&scope=' +\n                encodeURIComponent(scope);\n\n            if (loginHint) {\n                url += '&login_hint=' + encodeURIComponent(loginHint);\n            }\n\n            if (that.resource) {\n                url += '&resource=' + encodeURIComponent(that.resource);\n            }\n\n            if (that.oidc) {\n                url += '&nonce=' + encodeURIComponent(nonce);\n            }\n\n            if (noPrompt) {\n                url += '&prompt=none';\n            }\n\n            for (const key of Object.keys(params)) {\n                url +=\n                    '&' + encodeURIComponent(key) + '=' + encodeURIComponent(params[key]);\n            }\n\n            if (this.customQueryParams) {\n                for (const key of Object.getOwnPropertyNames(this.customQueryParams)) {\n                    url +=\n                        '&' + key + '=' + encodeURIComponent(this.customQueryParams[key]);\n                }\n            }\n\n            return url;\n        });\n    }\n\n    initImplicitFlowInternal(\n        additionalState = '',\n        params: string | object = ''\n    ): void {\n        if (this.inImplicitFlow) {\n            return;\n        }\n\n        this.inImplicitFlow = true;\n\n        if (!this.validateUrlForHttps(this.loginUrl)) {\n            throw new Error(\n                'loginUrl must use Http. Also check property requireHttps.'\n            );\n        }\n\n        let addParams: object = {};\n        let loginHint: string = null;\n\n        if (typeof params === 'string') {\n            loginHint = params;\n        } else if (typeof params === 'object') {\n            addParams = params;\n        }\n\n        this.createLoginUrl(additionalState, loginHint, null, false, addParams)\n            .then(this.config.openUri)\n            .catch(error => {\n                console.error('Error in initImplicitFlow');\n                console.error(error);\n                this.inImplicitFlow = false;\n            });\n    }\n\n    /**\n     * Starts the implicit flow and redirects to user to\n     * the auth servers login url.\n     *\n     * @param additionalState Optinal state that is passes around.\n     *  You find this state in the property ``state`` after ``tryLogin`` logged in the user.\n     * @param params Hash with additional parameter. If it is a string, it is used for the\n     *               parameter loginHint (for the sake of compatibility with former versions)\n     */\n    public initImplicitFlow(\n        additionalState = '',\n        params: string | object = ''\n    ): void {\n        if (this.loginUrl !== '') {\n            this.initImplicitFlowInternal(additionalState, params);\n        } else {\n            this.events\n                .pipe(filter(e => e.type === 'discovery_document_loaded'))\n                .subscribe(_ => this.initImplicitFlowInternal(additionalState, params));\n        }\n    }\n\n    private callOnTokenReceivedIfExists(options: LoginOptions): void {\n        const that = this;\n        if (options.onTokenReceived) {\n            const tokenParams = {\n                idClaims: that.getIdentityClaims(),\n                idToken: that.getIdToken(),\n                accessToken: that.getAccessToken(),\n                state: that.state\n            };\n            options.onTokenReceived(tokenParams);\n        }\n    }\n\n    private storeAccessTokenResponse(\n        accessToken: string,\n        refreshToken: string,\n        expiresIn: number,\n        grantedScopes: String\n    ): void {\n        this._storage.setItem('access_token', accessToken);\n        if (grantedScopes) {\n            this._storage.setItem('granted_scopes', JSON.stringify(grantedScopes.split('+')));\n        }\n        this._storage.setItem('access_token_stored_at', '' + Date.now());\n        if (expiresIn) {\n            const expiresInMilliSeconds = expiresIn * 1000;\n            const now = new Date();\n            const expiresAt = now.getTime() + expiresInMilliSeconds;\n            this._storage.setItem('expires_at', '' + expiresAt);\n        }\n\n        if (refreshToken) {\n            this._storage.setItem('refresh_token', refreshToken);\n        }\n    }\n\n    /**\n     * Checks whether there are tokens in the hash fragment\n     * as a result of the implicit flow. These tokens are\n     * parsed, validated and used to sign the user in to the\n     * current client.\n     *\n     * @param options Optinal options.\n     */\n    public tryLogin(options: LoginOptions = null): Promise<void> {\n        options = options || {};\n\n        let parts: object;\n\n        if (options.customHashFragment) {\n            parts = this.urlHelper.getHashFragmentParams(options.customHashFragment);\n        } else {\n            parts = this.urlHelper.getHashFragmentParams();\n        }\n\n        this.debug('parsed url', parts);\n\n        const state = parts['state'];\n        let nonceInState = state;\n\n        if (state) {\n            const idx = state.indexOf(this.config.nonceStateSeparator);\n\n            if (idx > -1) {\n                nonceInState = state.substr(0, idx);\n                this.state = state.substr(idx + this.config.nonceStateSeparator.length);\n            }\n        }\n\n        if (parts['error']) {\n            this.debug('error trying to login');\n            this.handleLoginError(options, parts);\n            const err = new OAuthErrorEvent('token_error', {}, parts);\n            this.eventsSubject.next(err);\n            return Promise.reject(err);\n        }\n\n        const accessToken = parts['access_token'];\n        const idToken = parts['id_token'];\n        const sessionState = parts['session_state'];\n        const grantedScopes = parts['scope'];\n\n        if (!this.requestAccessToken && !this.oidc) {\n            return Promise.reject(\n                'Either requestAccessToken or oidc or both must be true.'\n            );\n        }\n\n        if (this.requestAccessToken && !accessToken) {\n            return Promise.resolve();\n        }\n        if (this.requestAccessToken && !options.disableOAuth2StateCheck && !state) {\n            return Promise.resolve();\n        }\n        if (this.oidc && !idToken) {\n            return Promise.resolve();\n        }\n\n        if (this.sessionChecksEnabled && !sessionState) {\n            console.warn(\n                'session checks (Session Status Change Notification) ' +\n                'is activated in the configuration but the id_token ' +\n                'does not contain a session_state claim'\n            );\n        }\n\n        if (this.requestAccessToken && !options.disableOAuth2StateCheck) {\n            const success = this.validateNonceForAccessToken(\n                accessToken,\n                nonceInState\n            );\n            if (!success) {\n                const event = new OAuthErrorEvent('invalid_nonce_in_state', null);\n                this.eventsSubject.next(event);\n                return Promise.reject(event);\n            }\n        }\n\n        if (this.requestAccessToken) {\n            this.storeAccessTokenResponse(\n                accessToken,\n                null,\n                parts['expires_in'] || this.fallbackAccessTokenExpirationTimeInSec,\n                grantedScopes\n            );\n        }\n\n        if (!this.oidc) {\n            this.eventsSubject.next(new OAuthSuccessEvent('token_received'));\n            if (this.clearHashAfterLogin && !options.preventClearHashAfterLogin) {\n                location.hash = '';\n            }\n            return Promise.resolve();\n        }\n\n        return this.processIdToken(idToken, accessToken)\n            .then(result => {\n                if (options.validationHandler) {\n                    return options\n                        .validationHandler({\n                            accessToken: accessToken,\n                            idClaims: result.idTokenClaims,\n                            idToken: result.idToken,\n                            state: state\n                        })\n                        .then(_ => result);\n                }\n                return result;\n            })\n            .then(result => {\n                this.storeIdToken(result);\n                this.storeSessionState(sessionState);\n                if (this.clearHashAfterLogin) {\n                    location.hash = '';\n                }\n                this.eventsSubject.next(new OAuthSuccessEvent('token_received'));\n                this.callOnTokenReceivedIfExists(options);\n                this.inImplicitFlow = false;\n            })\n            .catch(reason => {\n                this.eventsSubject.next(\n                    new OAuthErrorEvent('token_validation_error', reason)\n                );\n                console.error('Error validating tokens');\n                console.error(reason);\n                return Promise.reject(reason);\n            });\n    }\n\n    private validateNonceForAccessToken(\n        accessToken: string,\n        nonceInState: string\n    ): boolean {\n        const savedNonce = this._storage.getItem('nonce');\n        if (savedNonce !== nonceInState) {\n            const err = 'validating access_token failed. wrong state/nonce.';\n            console.error(err, savedNonce, nonceInState);\n            return false;\n        }\n        return true;\n    }\n\n    protected storeIdToken(idToken: ParsedIdToken) {\n        this._storage.setItem('id_token', idToken.idToken);\n        this._storage.setItem('id_token_claims_obj', idToken.idTokenClaimsJson);\n        this._storage.setItem('id_token_expires_at', '' + idToken.idTokenExpiresAt);\n        this._storage.setItem('id_token_stored_at', '' + Date.now());\n    }\n\n    protected storeSessionState(sessionState: string): void {\n        this._storage.setItem('session_state', sessionState);\n    }\n\n    protected getSessionState(): string {\n        return this._storage.getItem('session_state');\n    }\n\n    private handleLoginError(options: LoginOptions, parts: object): void {\n        if (options.onLoginError) {\n            options.onLoginError(parts);\n        }\n        if (this.clearHashAfterLogin) {\n            location.hash = '';\n        }\n    }\n\n    /**\n     * @ignore\n     */\n    public processIdToken(\n        idToken: string,\n        accessToken: string\n    ): Promise<ParsedIdToken> {\n        const tokenParts = idToken.split('.');\n        const headerBase64 = this.padBase64(tokenParts[0]);\n        const headerJson = b64DecodeUnicode(headerBase64);\n        const header = JSON.parse(headerJson);\n        const claimsBase64 = this.padBase64(tokenParts[1]);\n        const claimsJson = b64DecodeUnicode(claimsBase64);\n        const claims = JSON.parse(claimsJson);\n        const savedNonce = this._storage.getItem('nonce');\n\n        if (Array.isArray(claims.aud)) {\n            if (claims.aud.every(v => v !== this.clientId)) {\n                const err = 'Wrong audience: ' + claims.aud.join(',');\n                console.warn(err);\n                return Promise.reject(err);\n            }\n        } else {\n            if (claims.aud !== this.clientId) {\n                const err = 'Wrong audience: ' + claims.aud;\n                console.warn(err);\n                return Promise.reject(err);\n            }\n        }\n\n        /*\n            if (this.getKeyCount() > 1 && !header.kid) {\n                let err = 'There needs to be a kid property in the id_token header when multiple keys are defined via the property jwks';\n                console.warn(err);\n                return Promise.reject(err);\n            }\n            */\n\n        if (!claims.sub) {\n            const err = 'No sub claim in id_token';\n            console.warn(err);\n            return Promise.reject(err);\n        }\n\n        /* For now, we only check whether the sub against\n             * silentRefreshSubject when sessionChecksEnabled is on\n             * We will reconsider in a later version to do this\n             * in every other case too.\n             */\n        if (\n            this.sessionChecksEnabled &&\n            this.silentRefreshSubject &&\n            this.silentRefreshSubject !== claims['sub']\n        ) {\n            const err =\n                'After refreshing, we got an id_token for another user (sub). ' +\n                `Expected sub: ${this.silentRefreshSubject}, received sub: ${\n                claims['sub']\n                }`;\n\n            console.warn(err);\n            return Promise.reject(err);\n        }\n\n        if (!claims.iat) {\n            const err = 'No iat claim in id_token';\n            console.warn(err);\n            return Promise.reject(err);\n        }\n\n        if (claims.iss !== this.issuer) {\n            const err = 'Wrong issuer: ' + claims.iss;\n            console.warn(err);\n            return Promise.reject(err);\n        }\n\n        if (claims.nonce !== savedNonce) {\n            const err = 'Wrong nonce: ' + claims.nonce;\n            console.warn(err);\n            return Promise.reject(err);\n        }\n\n        if (\n            !this.disableAtHashCheck &&\n            this.requestAccessToken &&\n            !claims['at_hash']\n        ) {\n            const err = 'An at_hash is needed!';\n            console.warn(err);\n            return Promise.reject(err);\n        }\n\n        const now = Date.now();\n        const issuedAtMSec = claims.iat * 1000;\n        const expiresAtMSec = claims.exp * 1000;\n        const tenMinutesInMsec = 1000 * 60 * 10;\n\n        if (\n            issuedAtMSec - tenMinutesInMsec >= now ||\n            expiresAtMSec + tenMinutesInMsec <= now\n        ) {\n            const err = 'Token has been expired';\n            console.error(err);\n            console.error({\n                now: now,\n                issuedAtMSec: issuedAtMSec,\n                expiresAtMSec: expiresAtMSec\n            });\n            return Promise.reject(err);\n        }\n\n        const validationParams: ValidationParams = {\n            accessToken: accessToken,\n            idToken: idToken,\n            jwks: this.jwks,\n            idTokenClaims: claims,\n            idTokenHeader: header,\n            loadKeys: () => this.loadJwks()\n        };\n\n        if (\n            !this.disableAtHashCheck &&\n            this.requestAccessToken &&\n            !this.checkAtHash(validationParams)\n        ) {\n            const err = 'Wrong at_hash';\n            console.warn(err);\n            return Promise.reject(err);\n        }\n\n        return this.checkSignature(validationParams).then(_ => {\n            const result: ParsedIdToken = {\n                idToken: idToken,\n                idTokenClaims: claims,\n                idTokenClaimsJson: claimsJson,\n                idTokenHeader: header,\n                idTokenHeaderJson: headerJson,\n                idTokenExpiresAt: expiresAtMSec\n            };\n            return result;\n        });\n    }\n\n    /**\n     * Returns the received claims about the user.\n     */\n    public getIdentityClaims(): object {\n        const claims = this._storage.getItem('id_token_claims_obj');\n        if (!claims) {\n            return null;\n        }\n        return JSON.parse(claims);\n    }\n\n    /**\n     * Returns the granted scopes from the server.\n     */\n    public getGrantedScopes(): object {\n        const scopes = this._storage.getItem('granted_scopes');\n        if (!scopes) {\n            return null;\n        }\n        return JSON.parse(scopes);\n    }\n\n    /**\n     * Returns the current id_token.\n     */\n    public getIdToken(): string {\n        return this._storage\n            ? this._storage.getItem('id_token')\n            : null;\n    }\n\n    private padBase64(base64data): string {\n        while (base64data.length % 4 !== 0) {\n            base64data += '=';\n        }\n        return base64data;\n    }\n\n    /**\n     * Returns the current access_token.\n     */\n    public getAccessToken(): string {\n        return this._storage.getItem('access_token');\n    }\n\n    public getRefreshToken(): string {\n        return this._storage.getItem('refresh_token');\n    }\n\n    /**\n     * Returns the expiration date of the access_token\n     * as milliseconds since 1970.\n     */\n    public getAccessTokenExpiration(): number {\n        if (!this._storage.getItem('expires_at')) {\n            return null;\n        }\n        return parseInt(this._storage.getItem('expires_at'), 10);\n    }\n\n    private getAccessTokenStoredAt(): number {\n        return parseInt(this._storage.getItem('access_token_stored_at'), 10);\n    }\n\n    private getIdTokenStoredAt(): number {\n        return parseInt(this._storage.getItem('id_token_stored_at'), 10);\n    }\n\n    /**\n     * Returns the expiration date of the id_token\n     * as milliseconds since 1970.\n     */\n    public getIdTokenExpiration(): number {\n        if (!this._storage.getItem('id_token_expires_at')) {\n            return null;\n        }\n\n        return parseInt(this._storage.getItem('id_token_expires_at'), 10);\n    }\n\n    /**\n     * Checkes, whether there is a valid access_token.\n     */\n    public hasValidAccessToken(): boolean {\n        if (this.getAccessToken()) {\n            const expiresAt = this._storage.getItem('expires_at');\n            const now = new Date();\n            if (expiresAt && parseInt(expiresAt, 10) < now.getTime()) {\n                return false;\n            }\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Checkes, whether there is a valid id_token.\n     */\n    public hasValidIdToken(): boolean {\n        if (this.getIdToken()) {\n            const expiresAt = this._storage.getItem('id_token_expires_at');\n            const now = new Date();\n            if (expiresAt && parseInt(expiresAt, 10) < now.getTime()) {\n                return false;\n            }\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Returns the auth-header that can be used\n     * to transmit the access_token to a service\n     */\n    public authorizationHeader(): string {\n        return 'Bearer ' + this.getAccessToken();\n    }\n\n    /**\n     * Removes all tokens and logs the user out.\n     * If a logout url is configured, the user is\n     * redirected to it.\n     * @param noRedirectToLogoutUrl\n     */\n    public logOut(noRedirectToLogoutUrl = false): void {\n        const id_token = this.getIdToken();\n        this._storage.removeItem('access_token');\n        this._storage.removeItem('id_token');\n        this._storage.removeItem('refresh_token');\n        this._storage.removeItem('nonce');\n        this._storage.removeItem('expires_at');\n        this._storage.removeItem('id_token_claims_obj');\n        this._storage.removeItem('id_token_expires_at');\n        this._storage.removeItem('id_token_stored_at');\n        this._storage.removeItem('access_token_stored_at');\n        this._storage.removeItem('granted_scopes');\n        this._storage.removeItem('session_state');\n\n        this.silentRefreshSubject = null;\n\n        this.eventsSubject.next(new OAuthInfoEvent('logout'));\n\n        if (!this.logoutUrl) {\n            return;\n        }\n        if (noRedirectToLogoutUrl) {\n            return;\n        }\n\n        if (!id_token && !this.postLogoutRedirectUri) {\n            return;\n        }\n\n        let logoutUrl: string;\n\n        if (!this.validateUrlForHttps(this.logoutUrl)) {\n            throw new Error(\n                'logoutUrl must use Http. Also check property requireHttps.'\n            );\n        }\n\n        // For backward compatibility\n        if (this.logoutUrl.indexOf('{{') > -1) {\n            logoutUrl = this.logoutUrl\n                .replace(/\\{\\{id_token\\}\\}/, id_token)\n                .replace(/\\{\\{client_id\\}\\}/, this.clientId);\n        } else {\n\n            let params = new HttpParams();\n\n            if (id_token) {\n                params = params.set('id_token_hint', id_token);\n            }\n\n            const postLogoutUrl = this.postLogoutRedirectUri || this.redirectUri;\n            if (postLogoutUrl) {\n                params = params.set('post_logout_redirect_uri', postLogoutUrl);\n            }\n\n            logoutUrl =\n                this.logoutUrl +\n                (this.logoutUrl.indexOf('?') > -1 ? '&' : '?') +\n                params.toString()\n        }\n        this.config.openUri(logoutUrl);\n    }\n\n    /**\n     * @ignore\n     */\n    public createAndSaveNonce(): Promise<string> {\n        const that = this;\n        return this.createNonce().then(function (nonce: any) {\n            that._storage.setItem('nonce', nonce);\n            return nonce;\n        });\n    }\n\n    protected createNonce(): Promise<string> {\n        return new Promise((resolve, reject) => {\n            if (this.rngUrl) {\n                throw new Error(\n                    'createNonce with rng-web-api has not been implemented so far'\n                );\n            } else {\n                let text = '';\n                const possible =\n                    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n                for (let i = 0; i < 40; i++) {\n                    text += possible.charAt(Math.floor(Math.random() * possible.length));\n                }\n\n                resolve(text);\n            }\n        });\n    }\n\n    private checkAtHash(params: ValidationParams): boolean {\n        if (!this.tokenValidationHandler) {\n            console.warn(\n                'No tokenValidationHandler configured. Cannot check at_hash.'\n            );\n            return true;\n        }\n        return this.tokenValidationHandler.validateAtHash(params);\n    }\n\n    private checkSignature(params: ValidationParams): Promise<any> {\n        if (!this.tokenValidationHandler) {\n            console.warn(\n                'No tokenValidationHandler configured. Cannot check signature.'\n            );\n            return Promise.resolve(null);\n        }\n        return this.tokenValidationHandler.validateSignature(params);\n    }\n}\n",
    "export abstract class OAuthModuleConfig {\n  resourceServer: OAuthResourceServerConfig;\n}\n\nexport abstract class OAuthResourceServerConfig {\n  /**\n   * Urls for which calls should be intercepted.\n   * If there is an ResourceServerErrorHandler registered, it is used for them.\n   * If sendAccessToken is set to true, the access_token is send to them too.\n   */\n  allowedUrls?: Array<string>;\n  sendAccessToken: boolean;\n}\n",
    "import { HttpResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\n\nexport abstract class OAuthResourceServerErrorHandler {\n  abstract handleError(err: HttpResponse<any>): Observable<any>;\n}\n\nexport class OAuthNoopResourceServerErrorHandler\n  implements OAuthResourceServerErrorHandler {\n  handleError(err: HttpResponse<any>): Observable<any> {\n    return throwError(err);\n  }\n}\n",
    "import { Injectable, Inject, Optional } from '@angular/core';\nimport { OAuthService } from '../oauth-service';\nimport { OAuthStorage } from '../types';\nimport {\n    HttpEvent,\n    HttpHandler,\n    HttpInterceptor,\n    HttpRequest,\n    HttpResponse,\n    HttpErrorResponse\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { OAuthResourceServerErrorHandler } from './resource-server-error-handler';\nimport { OAuthModuleConfig } from '../oauth-module.config';\n\n@Injectable()\nexport class DefaultOAuthInterceptor implements HttpInterceptor {\n    constructor(\n        private authStorage: OAuthStorage,\n        private errorHandler: OAuthResourceServerErrorHandler,\n        @Optional() private moduleConfig: OAuthModuleConfig\n    ) { }\n\n    private checkUrl(url: string): boolean {\n        const found = this.moduleConfig.resourceServer.allowedUrls.find(u => url.startsWith(u));\n        return !!found;\n    }\n\n    public intercept(\n        req: HttpRequest<any>,\n        next: HttpHandler\n    ): Observable<HttpEvent<any>> {\n        const url = req.url.toLowerCase();\n\n        if (!this.moduleConfig) {\n            return next.handle(req);\n        }\n        if (!this.moduleConfig.resourceServer) {\n            return next.handle(req);\n        }\n        if (this.moduleConfig.resourceServer.allowedUrls && !this.checkUrl(url)) {\n            return next.handle(req);\n        }\n\n        const sendAccessToken = this.moduleConfig.resourceServer.sendAccessToken;\n\n        if (sendAccessToken && this.authStorage.getItem('access_token')) {\n            const token = this.authStorage.getItem('access_token');\n            const header = 'Bearer ' + token;\n\n            const headers = req.headers.set('Authorization', header);\n\n            req = req.clone({ headers });\n        }\n\n        return next\n            .handle(req)\n            .pipe(catchError(err => this.errorHandler.handleError(err)));\n    }\n}\n",
    "import { ValidationHandler, ValidationParams } from './validation-handler';\n\n/**\n * A validation handler that isn't validating nothing.\n * Can be used to skip validation (on your own risk).\n */\nexport class NullValidationHandler implements ValidationHandler {\n  validateSignature(validationParams: ValidationParams): Promise<any> {\n    return Promise.resolve(null);\n  }\n  validateAtHash(validationParams: ValidationParams): boolean {\n    return true;\n  }\n}\n",
    "import { OAuthStorage } from './types';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\n\nimport { OAuthService } from './oauth-service';\nimport { UrlHelperService } from './url-helper.service';\n\nimport { OAuthModuleConfig } from './oauth-module.config';\nimport {\n  OAuthResourceServerErrorHandler,\n  OAuthNoopResourceServerErrorHandler\n} from './interceptors/resource-server-error-handler';\nimport { DefaultOAuthInterceptor } from './interceptors/default-oauth.interceptor';\nimport { ValidationHandler } from './token-validation/validation-handler';\nimport { NullValidationHandler } from './token-validation/null-validation-handler';\n\nexport function createDefaultStorage() {\n  return typeof sessionStorage !== 'undefined' ? sessionStorage : null;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [],\n  exports: []\n})\nexport class OAuthModule {\n  static forRoot(\n    config: OAuthModuleConfig = null,\n    validationHandlerClass = NullValidationHandler\n  ): ModuleWithProviders {\n    // const setupInterceptor = config && config.resourceServer && config.resourceServer.allowedUrls;\n\n    return {\n      ngModule: OAuthModule,\n      providers: [\n        OAuthService,\n        UrlHelperService,\n        { provide: OAuthStorage, useFactory: createDefaultStorage },\n        { provide: ValidationHandler, useClass: validationHandlerClass},\n        {\n          provide: OAuthResourceServerErrorHandler,\n          useClass: OAuthNoopResourceServerErrorHandler\n        },\n        { provide: OAuthModuleConfig, useValue: config },\n        {\n          provide: HTTP_INTERCEPTORS,\n          useClass: DefaultOAuthInterceptor,\n          multi: true\n        }\n      ]\n    };\n  }\n}\n",
    "import {\n  AbstractValidationHandler,\n  ValidationParams\n} from './validation-handler';\n\n// declare var require: any;\n// let rs = require('jsrsasign');\n\nimport * as rs from 'jsrsasign';\n\n/**\n * Validates the signature of an id_token against one\n * of the keys of an JSON Web Key Set (jwks).\n *\n * This jwks can be provided by the discovery document.\n */\nexport class JwksValidationHandler extends AbstractValidationHandler {\n  /**\n   * Allowed algorithms\n   */\n  allowedAlgorithms: string[] = [\n    'HS256',\n    'HS384',\n    'HS512',\n    'RS256',\n    'RS384',\n    'RS512',\n    'ES256',\n    'ES384',\n    'PS256',\n    'PS384',\n    'PS512'\n  ];\n\n  /**\n   * Time period in seconds the timestamp in the signature can\n   * differ from the current time.\n   */\n  gracePeriodInSec = 600;\n\n  validateSignature(params: ValidationParams, retry = false): Promise<any> {\n    if (!params.idToken) throw new Error('Parameter idToken expected!');\n    if (!params.idTokenHeader)\n      throw new Error('Parameter idTokenHandler expected.');\n    if (!params.jwks) throw new Error('Parameter jwks expected!');\n\n    if (\n      !params.jwks['keys'] ||\n      !Array.isArray(params.jwks['keys']) ||\n      params.jwks['keys'].length === 0\n    ) {\n      throw new Error('Array keys in jwks missing!');\n    }\n\n    // console.debug('validateSignature: retry', retry);\n\n    let kid: string = params.idTokenHeader['kid'];\n    let keys: object[] = params.jwks['keys'];\n    let key: object;\n\n    let alg = params.idTokenHeader['alg'];\n\n    if (kid) {\n      key = keys.find(k => k['kid'] === kid /* && k['use'] === 'sig' */);\n    } else {\n      let kty = this.alg2kty(alg);\n      let matchingKeys = keys.filter(\n        k => k['kty'] === kty && k['use'] === 'sig'\n      );\n\n      /*\n            if (matchingKeys.length == 0) {\n                let error = 'No matching key found.';\n                console.error(error);\n                return Promise.reject(error);\n            }*/\n      if (matchingKeys.length > 1) {\n        let error =\n          'More than one matching key found. Please specify a kid in the id_token header.';\n        console.error(error);\n        return Promise.reject(error);\n      } else if (matchingKeys.length === 1) {\n        key = matchingKeys[0];\n      }\n    }\n\n    if (!key && !retry && params.loadKeys) {\n      return params\n        .loadKeys()\n        .then(loadedKeys => (params.jwks = loadedKeys))\n        .then(_ => this.validateSignature(params, true));\n    }\n\n    if (!key && retry && !kid) {\n      let error = 'No matching key found.';\n      console.error(error);\n      return Promise.reject(error);\n    }\n\n    if (!key && retry && kid) {\n      let error =\n        'expected key not found in property jwks. ' +\n        'This property is most likely loaded with the ' +\n        'discovery document. ' +\n        'Expected key id (kid): ' +\n        kid;\n\n      console.error(error);\n      return Promise.reject(error);\n    }\n\n    let keyObj = rs.KEYUTIL.getKey(key);\n    let validationOptions = {\n      alg: this.allowedAlgorithms,\n      gracePeriod: this.gracePeriodInSec\n    };\n    let isValid = rs.KJUR.jws.JWS.verifyJWT(\n      params.idToken,\n      keyObj,\n      validationOptions\n    );\n\n    if (isValid) {\n      return Promise.resolve();\n    } else {\n      return Promise.reject('Signature not valid');\n    }\n  }\n\n  private alg2kty(alg: string) {\n    switch (alg.charAt(0)) {\n      case 'R':\n        return 'RSA';\n      case 'E':\n        return 'EC';\n      default:\n        throw new Error('Cannot infer kty from alg: ' + alg);\n    }\n  }\n\n  calcHash(valueToHash: string, algorithm: string): string {\n    let hashAlg = new rs.KJUR.crypto.MessageDigest({ alg: algorithm });\n    let result = hashAlg.digestString(valueToHash);\n    let byteArrayAsString = this.toByteArrayAsString(result);\n    return byteArrayAsString;\n  }\n\n  toByteArrayAsString(hexString: string) {\n    let result = '';\n    for (let i = 0; i < hexString.length; i += 2) {\n      let hexDigit = hexString.charAt(i) + hexString.charAt(i + 1);\n      let num = parseInt(hexDigit, 16);\n      result += String.fromCharCode(num);\n    }\n    return result;\n  }\n}\n",
    "import { InjectionToken } from '@angular/core';\nimport { AuthConfig } from './auth.config';\n\nexport const AUTH_CONFIG = new InjectionToken<AuthConfig>('AUTH_CONFIG');\n"
  ],
  "names": [
    "extendStatics",
    "Object",
    "setPrototypeOf",
    "__proto__",
    "Array",
    "d",
    "b",
    "p",
    "hasOwnProperty",
    "__extends",
    "__",
    "this",
    "constructor",
    "prototype",
    "create",
    "__values",
    "o",
    "m",
    "Symbol",
    "iterator",
    "i",
    "call",
    "next",
    "length",
    "value",
    "done",
    "__read",
    "n",
    "r",
    "e",
    "ar",
    "push",
    "error",
    "LoginOptions",
    "preventClearHashAfterLogin",
    "OAuthStorage",
    "ReceivedTokens",
    "ValidationHandler",
    "AbstractValidationHandler",
    "validateAtHash",
    "params",
    "hashAlg",
    "inferHashAlgorithm",
    "idTokenHeader",
    "tokenHash",
    "calcHash",
    "accessToken",
    "leftMostHalf",
    "substr",
    "atHash",
    "btoa",
    "replace",
    "claimsAtHash",
    "idTokenClaims",
    "console",
    "jwtHeader",
    "alg",
    "match",
    "Error",
    "UrlHelperService",
    "getHashFragmentParams",
    "customHashFragment",
    "hash",
    "window",
    "location",
    "decodeURIComponent",
    "indexOf",
    "questionMarkPosition",
    "parseQueryString",
    "queryString",
    "pairs",
    "pair",
    "separatorIndex",
    "escapedKey",
    "escapedValue",
    "key",
    "data",
    "split",
    "type",
    "Injectable",
    "OAuthEvent",
    "OAuthSuccessEvent",
    "_super",
    "info",
    "_this",
    "tslib_1.__extends",
    "OAuthInfoEvent",
    "OAuthErrorEvent",
    "reason",
    "b64DecodeUnicode",
    "str",
    "base64",
    "atob",
    "map",
    "c",
    "charCodeAt",
    "toString",
    "slice",
    "join",
    "AuthConfig",
    "json",
    "clientId",
    "redirectUri",
    "postLogoutRedirectUri",
    "loginUrl",
    "scope",
    "resource",
    "rngUrl",
    "oidc",
    "requestAccessToken",
    "options",
    "issuer",
    "logoutUrl",
    "clearHashAfterLogin",
    "tokenEndpoint",
    "userinfoEndpoint",
    "responseType",
    "showDebugInformation",
    "silentRefreshRedirectUri",
    "silentRefreshMessagePrefix",
    "silentRefreshShowIFrame",
    "siletRefreshTimeout",
    "silentRefreshTimeout",
    "dummyClientSecret",
    "requireHttps",
    "strictDiscoveryDocumentValidation",
    "jwks",
    "customQueryParams",
    "silentRefreshIFrameName",
    "timeoutFactor",
    "sessionChecksEnabled",
    "sessionCheckIntervall",
    "sessionCheckIFrameUrl",
    "sessionCheckIFrameName",
    "disableAtHashCheck",
    "skipSubjectCheck",
    "useIdTokenHintForSilentRefresh",
    "skipIssuerCheck",
    "nonceStateSeparator",
    "useHttpBasicAuthForPasswordFlow",
    "openUri",
    "uri",
    "href",
    "assign",
    "WebHttpUrlEncodingCodec",
    "encodeKey",
    "k",
    "encodeURIComponent",
    "encodeValue",
    "v",
    "decodeKey",
    "decodeValue",
    "OAuthService",
    "ngZone",
    "http",
    "storage",
    "tokenValidationHandler",
    "config",
    "urlHelper",
    "discoveryDocumentLoaded",
    "state",
    "eventsSubject",
    "Subject",
    "discoveryDocumentLoadedSubject",
    "grantTypesSupported",
    "inImplicitFlow",
    "discoveryDocumentLoaded$",
    "asObservable",
    "events",
    "configure",
    "setStorage",
    "sessionStorage",
    "setupRefreshTimer",
    "setupSessionCheck",
    "configChanged",
    "restartSessionChecksIfStillLoggedIn",
    "hasValidIdToken",
    "initSessionCheck",
    "restartRefreshTimerIfStillLoggedIn",
    "setupExpirationTimers",
    "pipe",
    "filter",
    "subscribe",
    "setupAutomaticSilentRefresh",
    "silentRefresh",
    "catch",
    "_",
    "debug",
    "loadDiscoveryDocumentAndTryLogin",
    "loadDiscoveryDocument",
    "then",
    "doc",
    "tryLogin",
    "loadDiscoveryDocumentAndLogin",
    "hasValidAccessToken",
    "initImplicitFlow",
    "args",
    "_i",
    "arguments",
    "apply",
    "validateUrlFromDiscoveryDocument",
    "url",
    "errors",
    "httpsCheck",
    "validateUrlForHttps",
    "issuerCheck",
    "validateUrlAgainstIssuer",
    "lcUrl",
    "toLowerCase",
    "startsWith",
    "clearAccessTokenTimer",
    "clearIdTokenTimer",
    "idTokenExp",
    "getIdTokenExpiration",
    "Number",
    "MAX_VALUE",
    "useAccessTokenExp",
    "getAccessTokenExpiration",
    "setupAccessTokenTimer",
    "setupIdTokenTimer",
    "expiration",
    "storedAt",
    "getAccessTokenStoredAt",
    "timeout",
    "calcTimeout",
    "runOutsideAngular",
    "accessTokenTimeoutSubscription",
    "of",
    "delay",
    "run",
    "getIdTokenStoredAt",
    "idTokenTimeoutSubscription",
    "unsubscribe",
    "_storage",
    "fullUrl",
    "Promise",
    "resolve",
    "reject",
    "endsWith",
    "get",
    "validateDiscoveryDocument",
    "authorization_endpoint",
    "end_session_endpoint",
    "grant_types_supported",
    "token_endpoint",
    "userinfo_endpoint",
    "jwksUri",
    "jwks_uri",
    "check_session_iframe",
    "loadJwks",
    "event",
    "discoveryDocument",
    "err",
    "warn",
    "fetchTokenUsingPasswordFlowAndLoadUserProfile",
    "userName",
    "password",
    "headers",
    "HttpHeaders",
    "fetchTokenUsingPasswordFlow",
    "loadUserProfile",
    "set",
    "getAccessToken",
    "existingClaims",
    "getIdentityClaims",
    "sub",
    "setItem",
    "JSON",
    "stringify",
    "HttpParams",
    "encoder",
    "header",
    "_a",
    "tslib_1.__values",
    "getOwnPropertyNames",
    "_b",
    "post",
    "tokenResponse",
    "storeAccessTokenResponse",
    "access_token",
    "refresh_token",
    "expires_in",
    "refreshToken",
    "getItem",
    "removeSilentRefreshEventListener",
    "silentRefreshPostMessageEventListener",
    "removeEventListener",
    "setupSilentRefreshEventListener",
    "expectedPrefix",
    "prefixedMessage",
    "message",
    "onLoginError",
    "onTokenReceived",
    "addEventListener",
    "noPrompt",
    "claims",
    "getIdToken",
    "document",
    "existingIframe",
    "getElementById",
    "body",
    "removeChild",
    "silentRefreshSubject",
    "iframe",
    "createElement",
    "id",
    "createLoginUrl",
    "setAttribute",
    "style",
    "appendChild",
    "first",
    "success",
    "race",
    "tap",
    "toPromise",
    "canPerformSessionCheck",
    "getSessionState",
    "setupSessionCheckEventListener",
    "removeSessionCheckEventListener",
    "sessionCheckEventListener",
    "origin",
    "handleSessionUnchanged",
    "handleSessionChange",
    "handleSessionError",
    "stopSessionCheckTimer",
    "waitForSilentRefreshAfterSessionChange",
    "logOut",
    "display",
    "startSessionCheckTimer",
    "sessionCheckTimer",
    "setInterval",
    "checkSession",
    "bind",
    "clearInterval",
    "sessionState",
    "contentWindow",
    "postMessage",
    "loginHint",
    "customRedirectUri",
    "that",
    "createAndSaveNonce",
    "nonce",
    "seperationChar",
    "keys",
    "_d",
    "_e",
    "initImplicitFlowInternal",
    "additionalState",
    "addParams",
    "callOnTokenReceivedIfExists",
    "tokenParams",
    "idClaims",
    "idToken",
    "expiresIn",
    "grantedScopes",
    "Date",
    "now",
    "expiresInMilliSeconds",
    "expiresAt",
    "getTime",
    "parts",
    "nonceInState",
    "idx",
    "handleLoginError",
    "disableOAuth2StateCheck",
    "validateNonceForAccessToken",
    "fallbackAccessTokenExpirationTimeInSec",
    "processIdToken",
    "result",
    "validationHandler",
    "storeIdToken",
    "storeSessionState",
    "savedNonce",
    "idTokenClaimsJson",
    "idTokenExpiresAt",
    "tokenParts",
    "headerJson",
    "padBase64",
    "parse",
    "claimsJson",
    "isArray",
    "aud",
    "every",
    "iat",
    "iss",
    "issuedAtMSec",
    "expiresAtMSec",
    "exp",
    "validationParams",
    "loadKeys",
    "checkAtHash",
    "checkSignature",
    "idTokenHeaderJson",
    "getGrantedScopes",
    "scopes",
    "base64data",
    "getRefreshToken",
    "parseInt",
    "authorizationHeader",
    "noRedirectToLogoutUrl",
    "id_token",
    "removeItem",
    "postLogoutUrl",
    "createNonce",
    "text",
    "possible",
    "charAt",
    "Math",
    "floor",
    "random",
    "validateSignature",
    "NgZone",
    "HttpClient",
    "decorators",
    "Optional",
    "OAuthModuleConfig",
    "OAuthResourceServerConfig",
    "OAuthResourceServerErrorHandler",
    "OAuthNoopResourceServerErrorHandler",
    "handleError",
    "throwError",
    "DefaultOAuthInterceptor",
    "authStorage",
    "errorHandler",
    "moduleConfig",
    "checkUrl",
    "resourceServer",
    "allowedUrls",
    "find",
    "u",
    "intercept",
    "req",
    "handle",
    "sendAccessToken",
    "clone",
    "catchError",
    "NullValidationHandler",
    "createDefaultStorage",
    "OAuthModule",
    "forRoot",
    "validationHandlerClass",
    "ngModule",
    "providers",
    "provide",
    "useFactory",
    "useClass",
    "useValue",
    "HTTP_INTERCEPTORS",
    "multi",
    "NgModule",
    "imports",
    "CommonModule",
    "declarations",
    "exports",
    "JwksValidationHandler",
    "concat",
    "allowedAlgorithms",
    "gracePeriodInSec",
    "retry",
    "kid",
    "kty_1",
    "alg2kty",
    "matchingKeys",
    "loadedKeys",
    "keyObj",
    "rs.KEYUTIL",
    "getKey",
    "validationOptions",
    "gracePeriod",
    "rs.KJUR",
    "jws",
    "JWS",
    "verifyJWT",
    "valueToHash",
    "algorithm",
    "crypto",
    "MessageDigest",
    "digestString",
    "toByteArrayAsString",
    "hexString",
    "hexDigit",
    "num",
    "String",
    "fromCharCode",
    "AUTH_CONFIG",
    "InjectionToken"
  ],
  "mappings": "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"
}
